//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClassLibrary1
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AlcosaEntities : DbContext
    {
        public AlcosaEntities()
            : base("name=AlcosaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ActaApertura> ActaAperturas { get; set; }
        public virtual DbSet<AgenciaAduanera> AgenciaAduaneras { get; set; }
        public virtual DbSet<Agente> Agentes { get; set; }
        public virtual DbSet<Area> Areas { get; set; }
        public virtual DbSet<Arqueo> Arqueos { get; set; }
        public virtual DbSet<Articulo> Articulos { get; set; }
        public virtual DbSet<AutorizacionRetiro> AutorizacionRetiros { get; set; }
        public virtual DbSet<BancoCobroPago> BancoCobroPagos { get; set; }
        public virtual DbSet<Banco> Bancos { get; set; }
        public virtual DbSet<Caja> Cajas { get; set; }
        public virtual DbSet<Cargo> Cargos { get; set; }
        public virtual DbSet<CentroCosto> CentroCostos { get; set; }
        public virtual DbSet<Cliente> Clientes { get; set; }
        public virtual DbSet<Compra> Compras { get; set; }
        public virtual DbSet<ComprobanteEgreso> ComprobanteEgresos { get; set; }
        public virtual DbSet<ComprobanteIngreso> ComprobanteIngresos { get; set; }
        public virtual DbSet<Concepto> Conceptos { get; set; }
        public virtual DbSet<CondicionPago> CondicionPagos { get; set; }
        public virtual DbSet<ConstanciaEntrega> ConstanciaEntregas { get; set; }
        public virtual DbSet<ContratoNave> ContratoNaves { get; set; }
        public virtual DbSet<Contrato> Contratos { get; set; }
        public virtual DbSet<CorrelativoComprobante> CorrelativoComprobantes { get; set; }
        public virtual DbSet<Cotizacione> Cotizaciones { get; set; }
        public virtual DbSet<CuentaBanco> CuentaBancos { get; set; }
        public virtual DbSet<CuentaContable> CuentaContables { get; set; }
        public virtual DbSet<CuentaCorriente> CuentaCorrientes { get; set; }
        public virtual DbSet<Desglos> Desgloses { get; set; }
        public virtual DbSet<Despacho> Despachos { get; set; }
        public virtual DbSet<DetActaApertura> DetActaAperturas { get; set; }
        public virtual DbSet<DetAutorizacionRetiro> DetAutorizacionRetiros { get; set; }
        public virtual DbSet<DetBancoCobroPago> DetBancoCobroPagos { get; set; }
        public virtual DbSet<DetClienteContacto> DetClienteContactos { get; set; }
        public virtual DbSet<DetCompra> DetCompras { get; set; }
        public virtual DbSet<DetConstanciaEntregaArea> DetConstanciaEntregaAreas { get; set; }
        public virtual DbSet<DetConstanciaEntrega> DetConstanciaEntregas { get; set; }
        public virtual DbSet<DetFacturado> DetFacturados { get; set; }
        public virtual DbSet<DetGuiaRemision> DetGuiaRemisions { get; set; }
        public virtual DbSet<DetHistorialCotizacione> DetHistorialCotizaciones { get; set; }
        public virtual DbSet<DetInventario> DetInventarios { get; set; }
        public virtual DbSet<DetNotaCredito> DetNotaCreditos { get; set; }
        public virtual DbSet<DetNotaSalida> DetNotaSalidas { get; set; }
        public virtual DbSet<DetOrdenCompra> DetOrdenCompras { get; set; }
        public virtual DbSet<DetOrdenIngresoAreaKardex> DetOrdenIngresoAreaKardexs { get; set; }
        public virtual DbSet<DetOrdenIngresoArea> DetOrdenIngresoAreas { get; set; }
        public virtual DbSet<DetOrdenIngresoCertificadoDeposito> DetOrdenIngresoCertificadoDepositos { get; set; }
        public virtual DbSet<DetOrdenIngreso> DetOrdenIngresos { get; set; }
        public virtual DbSet<DetPagoPersonale> DetPagoPersonales { get; set; }
        public virtual DbSet<DetRequerimientoProducto> DetRequerimientoProductos { get; set; }
        public virtual DbSet<DetTransferencia> DetTransferencias { get; set; }
        public virtual DbSet<DetVigilanciaGuia> DetVigilanciaGuias { get; set; }
        public virtual DbSet<DireccionCliente> DireccionClientes { get; set; }
        public virtual DbSet<Empleado> Empleados { get; set; }
        public virtual DbSet<EmpresaTransporte> EmpresaTransportes { get; set; }
        public virtual DbSet<Facturado> Facturados { get; set; }
        public virtual DbSet<FamiliaArticulo> FamiliaArticulos { get; set; }
        public virtual DbSet<FamiliaProducto> FamiliaProductos { get; set; }
        public virtual DbSet<FamiliaProveedore> FamiliaProveedores { get; set; }
        public virtual DbSet<GrupoPago> GrupoPagos { get; set; }
        public virtual DbSet<GuiaRemision> GuiaRemisions { get; set; }
        public virtual DbSet<HistorialCotizacione> HistorialCotizaciones { get; set; }
        public virtual DbSet<InventarioNave> InventarioNaves { get; set; }
        public virtual DbSet<Inventario> Inventarios { get; set; }
        public virtual DbSet<Jurisdiccione> Jurisdicciones { get; set; }
        public virtual DbSet<Licencia> Licencias { get; set; }
        public virtual DbSet<MedioPago> MedioPagos { get; set; }
        public virtual DbSet<ModuloOperacione> ModuloOperaciones { get; set; }
        public virtual DbSet<Modulo> Modulos { get; set; }
        public virtual DbSet<Moneda> Monedas { get; set; }
        public virtual DbSet<MotivoAnulComprobante> MotivoAnulComprobantes { get; set; }
        public virtual DbSet<MotivoAnulContrato> MotivoAnulContratos { get; set; }
        public virtual DbSet<MotivoAnulOc> MotivoAnulOcs { get; set; }
        public virtual DbSet<MotivoAnulPagoPersonale> MotivoAnulPagoPersonales { get; set; }
        public virtual DbSet<MotivoTransferenciaNave> MotivoTransferenciaNaves { get; set; }
        public virtual DbSet<MovCajaBanco> MovCajaBancos { get; set; }
        public virtual DbSet<Nave> Naves { get; set; }
        public virtual DbSet<NotaCreditoFacAplicado> NotaCreditoFacAplicados { get; set; }
        public virtual DbSet<NotaCredito> NotaCreditos { get; set; }
        public virtual DbSet<NotaDebito> NotaDebitos { get; set; }
        public virtual DbSet<NotaSalida> NotaSalidas { get; set; }
        public virtual DbSet<Operacione> Operaciones { get; set; }
        public virtual DbSet<OrdenCompra> OrdenCompras { get; set; }
        public virtual DbSet<OrdenIngreso> OrdenIngresos { get; set; }
        public virtual DbSet<OrigenDestino> OrigenDestinos { get; set; }
        public virtual DbSet<PagoPersonale> PagoPersonales { get; set; }
        public virtual DbSet<Pais> Paises { get; set; }
        public virtual DbSet<PaisesAnt> PaisesAnts { get; set; }
        public virtual DbSet<Parametro> Parametros { get; set; }
        public virtual DbSet<Pesado> Pesados { get; set; }
        public virtual DbSet<Producto> Productos { get; set; }
        public virtual DbSet<Proveedore> Proveedores { get; set; }
        public virtual DbSet<ReciboHonorario> ReciboHonorarios { get; set; }
        public virtual DbSet<RequerimientoProducto> RequerimientoProductos { get; set; }
        public virtual DbSet<Rubro> Rubros { get; set; }
        public virtual DbSet<Seccione> Secciones { get; set; }
        public virtual DbSet<ServicioPrestado> ServicioPrestados { get; set; }
        public virtual DbSet<SubArea> SubAreas { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Tarifa> Tarifas { get; set; }
        public virtual DbSet<TerminalAlmacenamiento> TerminalAlmacenamientos { get; set; }
        public virtual DbSet<TipoCambio> TipoCambios { get; set; }
        public virtual DbSet<TipoCliente> TipoClientes { get; set; }
        public virtual DbSet<TipoComprobantePago> TipoComprobantePagos { get; set; }
        public virtual DbSet<TipoContenedor> TipoContenedors { get; set; }
        public virtual DbSet<TipoDocIdentidade> TipoDocIdentidades { get; set; }
        public virtual DbSet<TipoFacturacione> TipoFacturaciones { get; set; }
        public virtual DbSet<TipoIgv> TipoIgvs { get; set; }
        public virtual DbSet<TipoIngreso> TipoIngresos { get; set; }
        public virtual DbSet<TipoMercaderia> TipoMercaderias { get; set; }
        public virtual DbSet<TipoNotaCredito> TipoNotaCreditos { get; set; }
        public virtual DbSet<TipoNotaDebito> TipoNotaDebitos { get; set; }
        public virtual DbSet<TipoRetiro> TipoRetiros { get; set; }
        public virtual DbSet<TipoTransporte> TipoTransportes { get; set; }
        public virtual DbSet<TransferenciaNave> TransferenciaNaves { get; set; }
        public virtual DbSet<Transferencia> Transferencias { get; set; }
        public virtual DbSet<Transportista> Transportistas { get; set; }
        public virtual DbSet<UnidadBulto> UnidadBultos { get; set; }
        public virtual DbSet<UnidadComerciale> UnidadComerciales { get; set; }
        public virtual DbSet<Unidade> Unidades { get; set; }
        public virtual DbSet<UnidadFisica> UnidadFisicas { get; set; }
        public virtual DbSet<Usuario> Usuarios { get; set; }
        public virtual DbSet<Vigilancia> Vigilancias { get; set; }
        public virtual DbSet<Zona> Zonas { get; set; }
        public virtual DbSet<Ubigeo> Ubigeos { get; set; }
        public virtual DbSet<ActaAperturasVi> ActaAperturasVis { get; set; }
        public virtual DbSet<AutorizacionRetirosVi> AutorizacionRetirosVis { get; set; }
        public virtual DbSet<BancoCobroPagosVi> BancoCobroPagosVis { get; set; }
        public virtual DbSet<ClientesVi> ClientesVis { get; set; }
        public virtual DbSet<ComprasVi> ComprasVis { get; set; }
        public virtual DbSet<ComprobanteEgresosVi> ComprobanteEgresosVis { get; set; }
        public virtual DbSet<ComprobanteIngresosVi> ComprobanteIngresosVis { get; set; }
        public virtual DbSet<ConstanciaEntregasVi> ConstanciaEntregasVis { get; set; }
        public virtual DbSet<ContratosVi> ContratosVis { get; set; }
        public virtual DbSet<CorrelativoComprobantesVi> CorrelativoComprobantesVis { get; set; }
        public virtual DbSet<CotizacionesVi> CotizacionesVis { get; set; }
        public virtual DbSet<CuentaCorrientesVi> CuentaCorrientesVis { get; set; }
        public virtual DbSet<DesglosesVi> DesglosesVis { get; set; }
        public virtual DbSet<DespachosVi> DespachosVis { get; set; }
        public virtual DbSet<DetAutorizacionRetirosVi> DetAutorizacionRetirosVis { get; set; }
        public virtual DbSet<DetBancoCobroPagosVi> DetBancoCobroPagosVis { get; set; }
        public virtual DbSet<DetComprasVi> DetComprasVis { get; set; }
        public virtual DbSet<DetConstanciaEntregaAreasVi> DetConstanciaEntregaAreasVis { get; set; }
        public virtual DbSet<DetConstanciaEntregasVi> DetConstanciaEntregasVis { get; set; }
        public virtual DbSet<DetFacturadosVi> DetFacturadosVis { get; set; }
        public virtual DbSet<DetGuiaRemisionsVi> DetGuiaRemisionsVis { get; set; }
        public virtual DbSet<DetInventariosVi> DetInventariosVis { get; set; }
        public virtual DbSet<DetNotaCreditosVi> DetNotaCreditosVis { get; set; }
        public virtual DbSet<DetOrdenIngresoAreaKardexsVi> DetOrdenIngresoAreaKardexsVis { get; set; }
        public virtual DbSet<DetOrdenIngresoAreasVi> DetOrdenIngresoAreasVis { get; set; }
        public virtual DbSet<DetOrdenIngresosVi> DetOrdenIngresosVis { get; set; }
        public virtual DbSet<DetTransferenciasVi> DetTransferenciasVis { get; set; }
        public virtual DbSet<EmpresaTransportesVi> EmpresaTransportesVis { get; set; }
        public virtual DbSet<FacturadosVi> FacturadosVis { get; set; }
        public virtual DbSet<GuiaRemisionsVi> GuiaRemisionsVis { get; set; }
        public virtual DbSet<InventarioNavesVi> InventarioNavesVis { get; set; }
        public virtual DbSet<InventariosVi> InventariosVis { get; set; }
        public virtual DbSet<ModuloOperacionesVi> ModuloOperacionesVis { get; set; }
        public virtual DbSet<MovCajaBancosVi> MovCajaBancosVis { get; set; }
        public virtual DbSet<NotaCreditosVi> NotaCreditosVis { get; set; }
        public virtual DbSet<NotaDebitosVi> NotaDebitosVis { get; set; }
        public virtual DbSet<OrdenComprasVi> OrdenComprasVis { get; set; }
        public virtual DbSet<OrdenIngresosVi> OrdenIngresosVis { get; set; }
        public virtual DbSet<PagoPersonalesVi> PagoPersonalesVis { get; set; }
        public virtual DbSet<PesadosVi> PesadosVis { get; set; }
        public virtual DbSet<ProductosVi> ProductosVis { get; set; }
        public virtual DbSet<ReciboHonorariosVi> ReciboHonorariosVis { get; set; }
        public virtual DbSet<RequerimientoProductosVi> RequerimientoProductosVis { get; set; }
        public virtual DbSet<RubrosVi> RubrosVis { get; set; }
        public virtual DbSet<ServicioPrestadosVi> ServicioPrestadosVis { get; set; }
        public virtual DbSet<TarifasVi> TarifasVis { get; set; }
        public virtual DbSet<TransferenciaNavesVi> TransferenciaNavesVis { get; set; }
        public virtual DbSet<TransferenciasVi> TransferenciasVis { get; set; }
        public virtual DbSet<VigilanciasVi> VigilanciasVis { get; set; }
    
        public virtual int LimpiarTablas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LimpiarTablas");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int usp_backupBDAlcosa()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_backupBDAlcosa");
        }
    }
}
